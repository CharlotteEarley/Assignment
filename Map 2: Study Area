%matplotlib notebook
     #importing necessary modules
import geopandas as gpd
import pandas as pd
from shapely.geometry import Point, LineString, Polygon
import matplotlib.pyplot as plt
from cartopy.feature import ShapelyFeature
import cartopy.crs as ccrs
import matplotlib.patches as mpatches
import matplotlib.lines as mlines

plt.ion()

def generate_handles(labels, colors, edge='k', alpha=1):
    lc = len(colors)  # get the length of the color list
    handles = []
    for i in range(len(labels)):
        handles.append(mpatches.Rectangle((0, 0), 1, 1, facecolor=colors[i % lc], edgecolor=edge, alpha=alpha))
    return handles

def scale_bar(ax, location=(0.92, 0.95)):
    llx0, llx1, lly0, lly1 = ax.get_extent(ccrs.PlateCarree())
    sbllx = (llx1 + llx0) / 2
    sblly = lly0 + (lly1 - lly0) * location[1]

    tmc = ccrs.TransverseMercator(sbllx, sblly)
    x0, x1, y0, y1 = ax.get_extent(tmc)
    sbx = x0 + (x1 - x0) * location[0]
    sby = y0 + (y1 - y0) * location[1]

    plt.plot([sbx, sbx - 20000], [sby, sby], color='k', linewidth=9, transform=tmc)
    plt.plot([sbx, sbx - 10000], [sby, sby], color='k', linewidth=6, transform=tmc)
    plt.plot([sbx-10000, sbx - 20000], [sby, sby], color='w', linewidth=6, transform=tmc)

    plt.text(sbx, sby-4500, '20 km', transform=tmc, fontsize=8)
    plt.text(sbx-12500, sby-4500, '10 km', transform=tmc, fontsize=8)
    plt.text(sbx-24500, sby-4500, '0 km', transform=tmc, fontsize=8)

        #importing Chittagong state to act as the outline
chitt = gpd.read_file('BangladeshData/chittagong.shp')

#=============================================================================================================
        #importing other necessary data
ward = gpd.read_file('BangladeshData/chittwards.shp')
towns = gpd.read_file('BangladeshData/bgd_majtowns/bgd_majtowns.shp')
road = gpd.read_file('BangladeshData/hotosm_bgd_southeast_roads_lines_shp/hotosm_bgd_southeast_roads_lines.shp')
school = gpd.read_file('BangladeshData/hotosm_bgd_southeast_education_facilities_points_shp/hotosm_bgd_southeast_education_facilities_points.shp')
hosp = gpd.read_file('BangladeshData/hotosm_bgd_southeast_health_facilities_points_shp/hotosm_bgd_southeast_health_facilities_points.shp')
#=============================================================================================================
        #Title of map and map introduction
print('Section 1: Close up map of the Chittagong region')
print('Chittagong is famous for having the world''s longest beach. On the eastern border is the country of Myanmar,')
print('which has been in the news recently as many Rohingya refugees have fled the country. This has put pressure on')
print('a state already struggling with poverty and population crowding.')
#=============================================================================================================
        #displaying the map
myFig2 = plt.figure(figsize=(12, 12))  
myCRS = ccrs.UTM(29)  
ax = plt.axes(projection=ccrs.Mercator()) 
#=============================================================================================================
        #selecting Chittagong as the outline
chitt_feature = ShapelyFeature(chitt['geometry'], myCRS, edgecolor='k', facecolor='w')
xmin, ymin, xmax, ymax = chitt.total_bounds
ax.add_feature(chitt_feature) 

ax.set_extent([xmin, xmax, ymin, ymax], crs=myCRS)
#=============================================================================================================
        #clipping data sets to Chittagong, roads could not be clipped as this caused the programme to freeze, workaround used
clippedtown = gpd.clip(towns, chitt)
clippedhosp = gpd.clip(hosp, chitt)
#clippedroad = gpd.clip(road, chitt) this layer is too large and appears to cause the system to freeze
clippedschool = gpd.clip(school, chitt)
#=============================================================================================================
        #adding data, decided to remove roads from display but still present for analysis
#road_feat = ShapelyFeature(clippedroad['geometry'], myCRS, 
#                            edgecolor='mediumblue', 
#                            facecolor='mediumblue',
#                            linewidth=1)
#ax.add_feature(road_feat) #have removed roads from displaying as they resulted in a messy appearance

school_handle = ax.plot(clippedschool.geometry.x, clippedschool.geometry.y, 's', color='red', ms=2, transform=myCRS)
hosp_handle = ax.plot(clippedhosp.geometry.x, clippedhosp.geometry.y, 's', color='blue', ms=2, transform=myCRS)
town_handle = ax.plot(clippedtown.geometry.x, clippedtown.geometry.y, 's', color='yellow', ms=4, transform=myCRS)
#=============================================================================================================
        #adding colors to each ward in Chittagong state
ward_colors = ['brown', 'chartreuse', 'springgreen', 'cyan', 'lime', 'turquoise', 'green', 'pink', 'orange', 'black', 'indigo']

ward_names = list(ward.ADM2_EN.unique())
ward_names.sort() 

for i, name in enumerate(ward_names):
    feat = ShapelyFeature(ward['geometry'][ward['ADM2_EN'] == name], myCRS, 
                          edgecolor='k',
                          facecolor=ward_colors[i],
                          linewidth=1,
                          alpha=0.25)
    ax.add_feature(feat)
#=============================================================================================================
        #making a legend, this time the legend will be in the bottom left and the text size has been changed
ward_handles = generate_handles(ward.ADM2_EN.unique(), ward_colors, alpha=0.25)

hosp_handle = generate_handles(['name'], ['mediumblue'])
school_handle = generate_handles(['name'], ['red'])
town_handle = generate_handles(['name'], ['yellow'])

nice_names = [name.title() for name in ward_names]

handles = ward_handles + hosp_handle + school_handle + town_handle 
labels = nice_names + ['Hospitals', 'Schools', 'Towns']

leg = ax.legend(handles, labels, title='Legend', title_fontsize=12, 
              fontsize=10, loc='lower left', frameon=True, framealpha=1)

#=============================================================================================================
        #creating labels for towns
for i, row in clippedtown.iterrows():
    x, y = row.geometry.x, row.geometry.y
    plt.text(x, y, row['nam'].title(), fontsize=8, transform=myCRS) 
#=============================================================================================================
#START OF ANALYSIS SECTION 
#This section follows the map and intends to produce a short report on statistics for the region
#=============================================================================================================
print('Section 2: Analysis')
print('Here we can extract some information from the layers using python functions.')
#=============================================================================================================
#This shows the number of wards within the state
num_ward = len(ward.ADM2_EN.unique())
print('1) Number of administrative wards within Chittagong state: {}'.format(num_ward)) 
#=============================================================================================================
#Calculating the sum of road types for each ward. Though the data has not been included visually it is still
#useful to include it in analysis. A join function has been used to join the data to the ward boundaries
print('2) Sum of each road type grouped by administrative ward.')
join = gpd.sjoin(ward, road, how='inner', lsuffix='left', rsuffix='right') # perform the spatial join
join

join_total = join['Shape_Leng'].sum()
print(join.groupby(['ADM2_EN', 'highway'])['Shape_Leng'].sum() / 1000) # summarize the road lengths by CountyName, Road_class

#KEEPING FOR FURTHER ANALYSIS
#sum_road = road['geometry'].sum()
#print('{:.2f} total m of motorway'.format(sum_motorway))
#road.crs
